{% import 'values_macros.j2' as value_macro %}

#include <stdint.h>
#include <stdbool.h>

#include "values.pb.h"

void pack_proto_value(capstone_Value* value_struct, capstone_ValueTag tag);
void unpack_proto_value(capstone_Value* value_struct, capstone_ValueTag tag);

{% for enum, enum_values in enums.items() %}
typedef enum {
    {{ enum }}_FIRST = 0,
{% for enum_value in enum_values %}
    {{ enum }}_{{ enum_value }}
    {% if loop.first %} = {{ enum }}_FIRST{% endif %},
{% endfor %}
    {{ enum }}_COUNT
} {{ enum.lower() }}_t;
{% endfor %}

typedef struct {
{% for value_name, value in values.items() %}
    {{ get_c_type(value) }} {{ value_name.lower() }};
{% endfor %}
} values_t;

typedef enum {
{% for packet in downlink_packets %}
    {% if loop.index0 == 0 %}
    DOWNLINK_PACKET_FIRST = 0,
    DOWNLINK_PACKET_{{ loop.index0 }} = DOWNLINK_PACKET_FIRST,
    {% else %}
    DOWNLINK_PACKET_{{ loop.index0 }},
    {% endif %}
{% endfor %}
    DOWNLINK_PACKET_COUNT,
} downlink_packet_t;

typedef enum {
{% for packet in uplink_packets %}
    {% if loop.index0 == 0 %}
    UPLINK_PACKET_FIRST = 0,
    UPLINK_PACKET_{{ loop.index0 }} = UPLINK_PACKET_FIRST,
    {% else %}
    UPLINK_PACKET_{{ loop.index0 }},
    {% endif %}
{% endfor %}
    UPLINK_PACKET_COUNT,
} uplink_packet_t;

{% for packet in downlink_packets %}
{{ value_macro.pack_packet_sig(loop.index0) }};
{% endfor %}

{% for packet in uplink_packets %}
{{ value_macro.unpack_packet_sig(loop.index0) }};
{% endfor %}

void pack_downlink_packet(downlink_packet_t packet, uint8_t* buffer);

extern values_t values;
extern uint8_t downlink_packet_lengths[DOWNLINK_PACKET_COUNT];
