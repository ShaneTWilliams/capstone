{% import 'c_macros.j2' as macro %}
{% import 'c_cmd_macros.j2' as cmd_macro %}

#pragma once

#include "driver_defs.h"

{{ macro.block_comment('FIXED FIELDS') }}

{% for cmd_name, command in cfg.commands.items() %}
    {% for field_name, field in command.tx.fields.items() %}
        {% if field.value %}
static const uint8_t {{ cmd_macro.cmd_dev_field(cfg.name, cmd_name, field_name) }} = 0x{{ '%02X' %  field.value }};
        {% endif %}
    {% endfor %}
{% endfor %}

{{ macro.block_comment('FIELD ENUMS') }}

{% for enum_name, enum in cfg.enums.items() %}
    typedef enum {
        {% for value_name, value in enum.items() %}
            {{ cfg.name.upper() }}_{{ enum_name.upper() }}_{{ value_name }} = 0x{{ '%02x' %  value }},
        {% endfor %}
    } {{cfg.name.lower()}}_{{ enum_name.lower() }}_t;

{% endfor %}

{% for cmd_name, command in cfg.commands.items() %}
    {{ macro.block_comment('COMMAND: ' + cmd_name) }}

    {{ cmd_macro.pack_func_sig(cfg.name, cmd_name, command, get_type)}};
    {% if command.rx.size > 0 %}
        {{ cmd_macro.unpack_func_sig(cfg.name, cmd_name, command, get_type)}};
    {% endif %}

    #define {{ cfg.name.upper() }}_{{ cmd_name.upper() }}_TX_SIZE {{ command.tx.size }}U
    #define {{ cfg.name.upper() }}_{{ cmd_name.upper() }}_RX_SIZE {{ command.rx.size }}U
    #define {{ cfg.name.upper() }}_{{ cmd_name.upper() }}_XFER_SIZE {{ [command.rx.size, command.tx.size]|max }}U

    {# TODO: Find out how to merge these two dictionaries #}
    {% for field_name, field in command.tx.fields.items() %}
        {% set offset = macro.offset(cfg.name, cmd_name, field_name) %}
        {% set size = macro.field_size(cfg.name, cmd_name, field_name) %}
        {% set lsb = macro.lsb(cfg.name, cmd_name, field_name) %}
        {% set type = macro.type(cfg.name, cmd_name, field_name) %}
        {% set mask = macro.mask(cfg.name, cmd_name, field_name) %}

        #define {{ offset }} {{ field.offset % 8 }}U
        #define {{ size }} {{ field.size }}U
        #define {{ mask }} ((1ULL << {{ size }}) - 1)
        #define {{ type }} {{ get_type(field) }}
    {% endfor %}
    {% if command.rx.fields %}
        {% for field_name, field in command.rx.fields.items() %}
            {% set offset = macro.offset(cfg.name, cmd_name, field_name) %}
            {% set size = macro.field_size(cfg.name, cmd_name, field_name) %}
            {% set lsb = macro.lsb(cfg.name, cmd_name, field_name) %}
            {% set type = macro.type(cfg.name, cmd_name, field_name) %}
            {% set mask = macro.mask(cfg.name, cmd_name, field_name) %}

            #define {{ offset }} {{ field.offset % 8 }}U
            #define {{ size }} {{ field.size }}U
            #define {{ mask }} ((1ULL << {{ size }}) - 1)
            #define {{ type }} {{ get_type(field) }}
        {% endfor %}
    {% endif %}

{% endfor %}
