{% import 'c_macros.j2' as macro %}

{% macro tx_size(dev, cmd) -%}
{{ dev.upper() }}_{{ cmd.upper() }}_TX_SIZE
{%- endmacro %}

{% macro rx_size(dev, cmd) -%}
{{ dev.upper() }}_{{ cmd.upper() }}_RX_SIZE
{%- endmacro %}

{% macro pack_func_sig(dev, cmd_name, cmd_config, get_type) -%}
void {{ dev.lower() }}_pack_{{ cmd_name.lower() }}(
    uint8_t* tx_buf
    {% for field_name, field in cmd_config.tx.fields.items() %}
        {% if not field.value %}
            ,{{ get_type(field) }} {{ field_name.lower() }}
        {% endif %}
    {% endfor %}
)
{%- endmacro %}

{% macro unpack_func_sig(dev, cmd_name, cmd_config, get_type) -%}
void {{ dev.lower() }}_unpack_{{ cmd_name.lower() }}(
    uint8_t* rx_buf
    {% if cmd_config.rx.fields %}
        {% for field_name, field in cmd_config.rx.fields.items() %}
            {% if not field.value %}
                ,{{ get_type(field) }}* {{ field_name.lower() }}
            {% endif %}
        {% endfor %}
    {% endif %}
)
{%- endmacro %}

{% macro cmd_dev_field(dev, cmd, field) -%}
{{ dev.upper() }}_{{ cmd.upper() }}_{{ field.upper() }}
{%- endmacro %}

{% macro cmd_dev_tx_assign(dev, cmd, field_name, field) -%}
    {% if field.value %}
        {% set name = dev + "_" + cmd + "_" + field_name %}
    {% else %}
        {% set name = field_name.lower() %}
    {% endif %}

    {%- if field.size > 4 * 8 %}
memcpy(&tx_buf[{{field.offset // 8}}], {{name}}, {{ macro.field_size(dev, cmd, field_name) }} / 8);
    {% else %}
        {%- for bit in range(field.offset, field.offset + field.size, 8) %}
            {% set byte = bit // 8 %}
            {% set rel_byte = (field.offset // 8) + (field.size / 8)|round(0, 'ceil')|int - byte - 1%}
            {% if field.offset % 8 == 0 %}
tx_buf[{{byte}}] |= ((uint8_t*)&{{name}})[{{rel_byte}}] & {{ macro.mask(dev, cmd, field_name) }};
            {% else %}
tx_buf[{{byte}}] |= (((uint8_t*)&{{name}})[{{rel_byte}}] & {{ macro.mask(dev, cmd, field_name) }}) << {{ macro.offset(dev, cmd, field_name) }};
            {% endif %}
        {% endfor %}
    {% endif %}
{%- endmacro %}

{% macro cmd_dev_rx_assign(dev, cmd, field_name, field) -%}
    {% set name = field_name.lower() %}

    {%- if field.size > 4 * 8 %}
memcpy(&rx_buf[{{field.offset // 8}}], {{name}}, {{ macro.field_size(dev, cmd, field_name) }} / 8);
    {% else %}
        {%- for bit in range(field.offset, field.offset + field.size, 8) %}
            {% set byte = bit // 8 %}
            {% set rel_byte = byte - (field.offset // 8) %}
            {% if field.offset % 8 == 0 %}
((uint8_t*){{name}})[{{rel_byte}}] = rx_buf[{{byte}}] & {{ macro.mask(dev, cmd, field_name) }};
            {% else %}
((uint8_t*){{name}})[{{rel_byte}}] = (rx_buf[{{byte}}] >> {{ macro.offset(dev, cmd, field_name) }}) & {{ macro.mask(dev, cmd, field_name) }};
            {% endif %}
        {% endfor %}
    {% endif %}
{%- endmacro %}
